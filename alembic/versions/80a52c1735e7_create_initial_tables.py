"""create initial tables

Revision ID: 80a52c1735e7
Revises: 
Create Date: 2025-01-16 15:09:46.542098

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '80a52c1735e7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('buildings',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('total_floors', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_buildings_created_at'), 'buildings', ['created_at'], unique=False)
    op.create_index(op.f('ix_buildings_is_deleted'), 'buildings', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_buildings_name'), 'buildings', ['name'], unique=False)
    op.create_index(op.f('ix_buildings_updated_at'), 'buildings', ['updated_at'], unique=False)
    op.create_table('owners',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_type', sa.Enum('INDIVIDUAL', 'COMPANY', 'TRUST', 'JOINT', 'GOVERNMENT', 'ASSOCIATION', name='ownertype'), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'SUSPENDED', 'BLOCKED', 'ARCHIVED', name='ownerstatus'), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('alternative_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('identification_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('whatsapp', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('telegram', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identification_number')
    )
    op.create_index(op.f('ix_owners_created_at'), 'owners', ['created_at'], unique=False)
    op.create_index(op.f('ix_owners_is_deleted'), 'owners', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_owners_name'), 'owners', ['name'], unique=False)
    op.create_index(op.f('ix_owners_updated_at'), 'owners', ['updated_at'], unique=False)
    op.create_table('floors',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('total_units', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['building_id'], ['buildings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_floors_created_at'), 'floors', ['created_at'], unique=False)
    op.create_index(op.f('ix_floors_is_deleted'), 'floors', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_floors_updated_at'), 'floors', ['updated_at'], unique=False)
    op.create_table('units',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('floor_id', sa.Integer(), nullable=False),
    sa.Column('unit_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('RESIDENTIAL', 'COMMERCIAL', 'OFFICE', 'RETAIL', 'PARKING', name='unittype'), nullable=False),
    sa.Column('status', sa.Enum('VACANT', 'OCCUPIED', 'MAINTENANCE', 'RESERVED', name='unitstatus'), nullable=False),
    sa.Column('area', sa.Float(), nullable=False),
    sa.Column('has_parking', sa.Boolean(), nullable=False),
    sa.Column('parking_space_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_occupied', sa.Boolean(), nullable=False),
    sa.Column('resident_count', sa.Integer(), nullable=False),
    sa.Column('constant_extra_charge', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['floor_id'], ['floors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_units_created_at'), 'units', ['created_at'], unique=False)
    op.create_index(op.f('ix_units_is_deleted'), 'units', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_units_unit_number'), 'units', ['unit_number'], unique=False)
    op.create_index(op.f('ix_units_updated_at'), 'units', ['updated_at'], unique=False)
    op.create_table('tenants',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('tenant_type', sa.Enum('INDIVIDUAL', 'FAMILY', 'COMPANY', 'STUDENT', 'GOVERNMENT', 'ORGANIZATION', name='tenanttype'), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'SUSPENDED', 'NOTICE_GIVEN', 'MOVED_OUT', 'EVICTED', 'BLACKLISTED', name='tenantstatus'), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('emergency_contact_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_relation', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('vehicle_info', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('identification_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('whatsapp', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('telegram', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('occupant_count', sa.Integer(), nullable=False),
    sa.Column('lease_start_date', sa.Date(), nullable=False),
    sa.Column('lease_end_date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identification_number')
    )
    op.create_index(op.f('ix_tenants_created_at'), 'tenants', ['created_at'], unique=False)
    op.create_index(op.f('ix_tenants_is_deleted'), 'tenants', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=False)
    op.create_index(op.f('ix_tenants_updated_at'), 'tenants', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_tenants_updated_at'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_is_deleted'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_created_at'), table_name='tenants')
    op.drop_table('tenants')
    op.drop_index(op.f('ix_units_updated_at'), table_name='units')
    op.drop_index(op.f('ix_units_unit_number'), table_name='units')
    op.drop_index(op.f('ix_units_is_deleted'), table_name='units')
    op.drop_index(op.f('ix_units_created_at'), table_name='units')
    op.drop_table('units')
    op.drop_index(op.f('ix_floors_updated_at'), table_name='floors')
    op.drop_index(op.f('ix_floors_is_deleted'), table_name='floors')
    op.drop_index(op.f('ix_floors_created_at'), table_name='floors')
    op.drop_table('floors')
    op.drop_index(op.f('ix_owners_updated_at'), table_name='owners')
    op.drop_index(op.f('ix_owners_name'), table_name='owners')
    op.drop_index(op.f('ix_owners_is_deleted'), table_name='owners')
    op.drop_index(op.f('ix_owners_created_at'), table_name='owners')
    op.drop_table('owners')
    op.drop_index(op.f('ix_buildings_updated_at'), table_name='buildings')
    op.drop_index(op.f('ix_buildings_name'), table_name='buildings')
    op.drop_index(op.f('ix_buildings_is_deleted'), table_name='buildings')
    op.drop_index(op.f('ix_buildings_created_at'), table_name='buildings')
    op.drop_table('buildings')
    # ### end Alembic commands ###
