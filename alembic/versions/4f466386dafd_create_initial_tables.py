"""create initial tables

Revision ID: 4f466386dafd
Revises: 
Create Date: 2025-01-17 12:39:51.069801

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '4f466386dafd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('buildings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('total_floors', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_buildings_is_deleted'), 'buildings', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_buildings_name'), 'buildings', ['name'], unique=False)
    op.create_table('owners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('owner_type', sa.Enum('INDIVIDUAL', 'COMPANY', 'TRUST', 'JOINT', 'GOVERNMENT', 'ASSOCIATION', name='ownertype'), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'SUSPENDED', 'BLOCKED', 'ARCHIVED', name='ownerstatus'), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('alternative_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('identification_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('whatsapp', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('telegram', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identification_number')
    )
    op.create_index(op.f('ix_owners_is_deleted'), 'owners', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_owners_name'), 'owners', ['name'], unique=False)
    op.create_table('floors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('total_units', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['building_id'], ['buildings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_floors_is_deleted'), 'floors', ['is_deleted'], unique=False)
    op.create_table('funds',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('fund_type', sa.Enum('MAINTENANCE', 'RESERVE', 'OPERATIONAL', 'RENOVATION', 'SPECIAL_PROJECT', 'EMERGENCY', 'SINKING', 'OTHER', name='fundtype'), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'DEPLETED', 'FROZEN', 'PENDING_APPROVAL', 'CLOSED', name='fundstatus'), nullable=True),
    sa.Column('current_balance', sa.Numeric(), nullable=False),
    sa.Column('target_amount', sa.Numeric(), nullable=True),
    sa.Column('minimum_balance', sa.Numeric(), nullable=False),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('manager', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('last_audit_date', sa.DateTime(), nullable=True),
    sa.Column('next_audit_date', sa.DateTime(), nullable=True),
    sa.Column('withdrawal_limit', sa.Numeric(), nullable=True),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('approval_threshold', sa.Numeric(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.ForeignKeyConstraint(['building_id'], ['buildings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_funds_is_deleted'), 'funds', ['is_deleted'], unique=False)
    op.create_table('units',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('floor_id', sa.Integer(), nullable=False),
    sa.Column('unit_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('RESIDENTIAL', 'COMMERCIAL', 'OFFICE', 'RETAIL', 'PARKING', name='unittype'), nullable=False),
    sa.Column('status', sa.Enum('VACANT', 'OCCUPIED', 'MAINTENANCE', 'RESERVED', name='unitstatus'), nullable=False),
    sa.Column('area', sa.Float(), nullable=False),
    sa.Column('has_parking', sa.Boolean(), nullable=False),
    sa.Column('parking_space_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_occupied', sa.Boolean(), nullable=False),
    sa.Column('resident_count', sa.Integer(), nullable=False),
    sa.Column('constant_extra_charge', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['floor_id'], ['floors.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_units_is_deleted'), 'units', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_units_unit_number'), 'units', ['unit_number'], unique=False)
    op.create_table('costs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('cost_type', sa.Enum('MAINTENANCE', 'REPAIR', 'UTILITY', 'STAFF', 'SECURITY', 'CLEANING', 'RENOVATION', 'INSURANCE', 'TAXES', 'EQUIPMENT', 'SUPPLIES', 'EMERGENCY', 'OTHER', name='costtype'), nullable=True),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'URGENT', name='costpriority'), nullable=True),
    sa.Column('status', sa.Enum('PLANNED', 'APPROVED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'ON_HOLD', 'DRAFT', 'PENDING', 'REJECTED', 'PAID', 'REFUNDED', name='coststatus'), nullable=True),
    sa.Column('planned_date', sa.DateTime(), nullable=False),
    sa.Column('actual_date', sa.DateTime(), nullable=True),
    sa.Column('completion_date', sa.DateTime(), nullable=True),
    sa.Column('estimated_amount', sa.Float(), nullable=False),
    sa.Column('actual_amount', sa.Float(), nullable=True),
    sa.Column('variance_amount', sa.Float(), nullable=True),
    sa.Column('budget_code', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('floor_id', sa.Integer(), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('frequency_months', sa.Integer(), nullable=True),
    sa.Column('warranty_expires', sa.DateTime(), nullable=True),
    sa.Column('invoice_number', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('purchase_order', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.ForeignKeyConstraint(['building_id'], ['buildings.id'], ),
    sa.ForeignKeyConstraint(['floor_id'], ['floors.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_costs_is_deleted'), 'costs', ['is_deleted'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=False),
    sa.Column('tenant_type', sa.Enum('INDIVIDUAL', 'FAMILY', 'COMPANY', 'STUDENT', 'GOVERNMENT', 'ORGANIZATION', name='tenanttype'), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PENDING', 'SUSPENDED', 'NOTICE_GIVEN', 'MOVED_OUT', 'EVICTED', 'BLACKLISTED', name='tenantstatus'), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('emergency_contact_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_relation', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('vehicle_info', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('identification_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('whatsapp', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('telegram', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('occupant_count', sa.Integer(), nullable=False),
    sa.Column('lease_start_date', sa.Date(), nullable=False),
    sa.Column('lease_end_date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identification_number')
    )
    op.create_index(op.f('ix_tenants_is_deleted'), 'tenants', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=False)
    op.create_table('charges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('type', sa.Enum('RECURRING', 'MAINTENANCE', 'UTILITY', 'PARKING', 'RENOVATION', 'PENALTY', 'DEPOSIT', 'RENT', 'OTHER', name='chargetype'), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PAID', 'OVERDUE', 'CANCELLED', 'PARTIALLY_PAID', 'DISPUTED', name='chargestatus'), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=False),
    sa.Column('frequency', sa.Enum('ONCE', 'DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY', name='chargefrequency'), nullable=True),
    sa.Column('recurring', sa.Boolean(), nullable=False),
    sa.Column('amount_paid', sa.Float(), nullable=False),
    sa.Column('last_payment_date', sa.DateTime(), nullable=True),
    sa.Column('payment_reference', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('unit_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('generated_by', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('tax_rate', sa.Float(), nullable=True),
    sa.Column('is_taxable', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['building_id'], ['buildings.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.ForeignKeyConstraint(['unit_id'], ['units.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_charges_is_deleted'), 'charges', ['is_deleted'], unique=False)
    op.create_table('cost_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('cost_id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('document_type', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('mime_type', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['cost_id'], ['costs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cost_documents_is_deleted'), 'cost_documents', ['is_deleted'], unique=False)
    op.create_table('fund_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('fund_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REVERSED', 'PROCESSING', name='transactionstatus'), nullable=True),
    sa.Column('payment_method', sa.Enum('CASH', 'BANK_TRANSFER', 'CHECK', 'CREDIT_CARD', 'DEBIT_CARD', 'ONLINE_PAYMENT', 'INTERNAL_TRANSFER', 'OTHER', name='paymentmethod'), nullable=True),
    sa.Column('transaction_type', sa.Enum('CONTRIBUTION', 'WITHDRAWAL', 'TRANSFER_IN', 'TRANSFER_OUT', 'INTEREST', 'ADJUSTMENT', 'REFUND', 'FEE', name='transactiontype'), nullable=True),
    sa.Column('amount', sa.Numeric(), nullable=False),
    sa.Column('balance_after', sa.Numeric(), nullable=False),
    sa.Column('reference_number', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('cost_id', sa.Integer(), nullable=True),
    sa.Column('charge_id', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=False),
    sa.Column('transaction_date', sa.DateTime(), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.ForeignKeyConstraint(['charge_id'], ['charges.id'], ),
    sa.ForeignKeyConstraint(['cost_id'], ['costs.id'], ),
    sa.ForeignKeyConstraint(['fund_id'], ['funds.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_fund_transactions_is_deleted'), 'fund_transactions', ['is_deleted'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('charge_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('payment_date', sa.DateTime(), nullable=False),
    sa.Column('payment_method', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('transaction_id', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['charge_id'], ['charges.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_is_deleted'), 'payments', ['is_deleted'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_payments_is_deleted'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_fund_transactions_is_deleted'), table_name='fund_transactions')
    op.drop_table('fund_transactions')
    op.drop_index(op.f('ix_cost_documents_is_deleted'), table_name='cost_documents')
    op.drop_table('cost_documents')
    op.drop_index(op.f('ix_charges_is_deleted'), table_name='charges')
    op.drop_table('charges')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_is_deleted'), table_name='tenants')
    op.drop_table('tenants')
    op.drop_index(op.f('ix_costs_is_deleted'), table_name='costs')
    op.drop_table('costs')
    op.drop_index(op.f('ix_units_unit_number'), table_name='units')
    op.drop_index(op.f('ix_units_is_deleted'), table_name='units')
    op.drop_table('units')
    op.drop_index(op.f('ix_funds_is_deleted'), table_name='funds')
    op.drop_table('funds')
    op.drop_index(op.f('ix_floors_is_deleted'), table_name='floors')
    op.drop_table('floors')
    op.drop_index(op.f('ix_owners_name'), table_name='owners')
    op.drop_index(op.f('ix_owners_is_deleted'), table_name='owners')
    op.drop_table('owners')
    op.drop_index(op.f('ix_buildings_name'), table_name='buildings')
    op.drop_index(op.f('ix_buildings_is_deleted'), table_name='buildings')
    op.drop_table('buildings')
    # ### end Alembic commands ###
